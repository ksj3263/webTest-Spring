<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.webTest2.example.mapper.UserMapper">
	<!-- 권한 읽기 -->
	<select id="readAuthorities" parameterType="String" resultType="org.springframework.security.core.authority.SimpleGrantedAuthority">
		select u_auth
		from auth
		where 1=1
		and u_id = #{username}
	</select>
	
	<!-- 회원 불러오기 -->
	<select id="readUser" parameterType="String" resultType="User">
		select u_id as username,
			u_password as password,
			u_name as uName,
			u_isAccountNonExpired as isAccountNonExpired,
			u_isAccountNonLocked as isAccountNonLocked,
			u_isCredentialNonExpired as isCredentialsNonExpired,
			u_isEnabled as isEnabled
		from user
		where 1=1
		and u_id = #{username}
	</select>
	
	<!-- 회원 등록 -->
	<insert id="createUser" parameterType="User">
		insert into user (
			u_id,
			u_password,
			u_name,
			u_isAccountNonExpired,
			u_isAccountNonLocked,
			u_isCredentialNonExpired,
			u_isEnabled
		) values (
			#{username},
			#{password},
			#{uName},
			#{isAccountNonExpired},
			#{isAccountNonLocked},
			#{isCredentialsNonExpired},
			#{isEnabled}
		)
	</insert>
	
	<!-- 유저 권한 추가 -->
	<insert id="createAuthority" parameterType="org.springframework.security.core.GrantedAuthority">
		insert into auth (
			u_id,
			u_auth
		) values
			<foreach item="authority" index="index" collection="authorities" separator=",">
				(#{username}, #{authority.role})
			</foreach>
		on duplicate key
		update
			u_id = #{username}
	</insert>
	
	<select id="selectUserList" resultType="User">
		SELECT @ROWNUM := @ROWNUM -1 as ROWNUM,
				ta.u_id as username,
				ta.u_password as password,
				ta.u_name as uName,
				ta.u_datetime as uDateTime,
				ta.u_isAccountNonExpired as isAccountNonExpired,
				ta.u_isAccountNonLocked as isAccountNonLocked,
				ta.u_isCredentialNonExpired as isCredentialsNonExpired,
				ta.u_isEnabled as isEnabled
	    FROM user ta,
	    	(select @rownum := (select count(*)-#{pageNum}+1 from user ta)) tb
	  	order by ta.u_datetime desc
	    limit #{pageNum}, 10
	</select>
	
	<select id="getUserCount" resultType="int">
		select count(*) as count
		from user
	</select>
	
	<select id="findUser" parameterType="String" resultType="User">
		select u_id as username,
				u_password as password,
				u_name as uName,
				u_datetime as uDateTime,
				u_isAccountNonExpired as isAccountNonExpired,
				u_isAccountNonLocked as isAccountNonLocked,
				u_isCredentialNonExpired as isCredentialsNonExpired,
				u_isEnabled as isEnabled
		from user
		where u_id = #{username}
	</select>
	
	<update id="editUser" parameterType="User">
		update user
		set u_name = #{uName},
			u_isAccountNonExpired = #{isAccountNonExpired},
			u_isAccountNonLocked = #{isAccountNonLocked},
			u_isCredentialNonExpired = #{isCredentialsNonExpired},
			u_isEnabled = #{isEnabled}
		where u_id = #{username}
	</update>
	
	<delete id="delUser" parameterType="String">
		delete from user
		where u_id = #{username}
	</delete>
</mapper>